library(lpSolveAPI)
chips <- make.lp(0, 8)
lp.control(chips, sense= "maximize")  #Player 1, hence sense is maximize
set.objfn(chips, c(0, 0, 0, 0, 0, 0, 0, 1))
add.constraint(chips, c(-1, -2, -1, 0, -1, -2, -1, 1), "<=", 0) #David: Strategy 1
add.constraint(chips, c(0, -2, -2, -2, -2, -1, 0, 1), "<=", 0) #David: Strategy 2
add.constraint(chips, c(0, 0, -2, -4, -2, 0, 0, 1), "<=", 0) #David: Strategy 3
add.constraint(chips, c(0, -1, -2, -2, -2, -1, 0, 1), "<=", 0) #David: Strategy 4
add.constraint(chips, c(-1, -2, -1, 0, -1, -2, -1, 1), "<=", 0) #David: Strategy 5
add.constraint(chips, c(1,1,1,1,1,1,1,0), "=", 1)    #Sum of probability
set.bounds(chips, lower = c(0, 0, 0, 0, 0, 0, 0, -Inf))
RowNames <- c("Row1", "Row2", "Row3","Row4", "Row5", "Row6")
ColNames <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "v")
dimnames(chips) <- list(RowNames, ColNames)
solve(chips) # http://lpsolve.sourceforge.net/5.5/solve.htm
get.objective(chips) #Value of the game
get.variables(chips) #Probability distribution for Helen's strategies
get.constraints(chips)
chips
library(lpSolveAPI)
chips <- make.lp(0, 6)
lp.control(chips, sense= "minimize")  #Player 2, hence sense is minimize
set.objfn(chips, c(0, 0, 0, 0, 0, 1))
add.constraint(chips, c(-1, 0, 0, 0, -1, 1), ">=", 0) #Helen uses strategy 1
add.constraint(chips, c(-2, -2, 0, -1, -2, 1), ">=", 0) #Helen uses strategy 2
add.constraint(chips, c(-1, -2, -2, -2, -1, 1), ">=", 0) #Helen uses strategy 3
add.constraint(chips, c(0, -2, -4, -2, 0, 1), ">=", 0) #Helen uses strategy 4
add.constraint(chips, c(-1, -2, -2, -2, -1, 1), ">=", 0) #Helen uses strategy 5
add.constraint(chips, c(-2, -1, 0, -1, -2, 1), ">=", 0) #Helen uses strategy 6
add.constraint(chips, c(-1, 0, 0, 0, -1, 1), ">=", 0) #Helen uses strategy 7
add.constraint(chips, c(1,1,1,1,1,0), "=", 1) #Sum of probability
set.bounds(chips, lower = c(0, 0, 0, 0, 0, -Inf))
RowNames <- c("Row1", "Row2", "Row3","Row4", "Row5", "Row6", "Row7","Row8" )
ColNames <- c("y1", "y2", "y3", "y4", "y5", "v")
dimnames(chips) <- list(RowNames, ColNames)
solve(chips) # http://lpsolve.sourceforge.net/5.5/solve.htm
get.objective(chips) #Value of the game
get.variables(chips) #Probability distribution
get.constraints(chips)
chips
############ Helen's game ##############
library(lpSolveAPI)
lprec <- make.lp(0, 8)
lp.control(lprec, sense= "maximize")  #Player 1, hence sense is maximize
set.objfn(lprec, c(0, 0, 0, 0, 0, 0, 0, 1))
add.constraint(lprec, c(-1, -2, -1, 0, -1, -2, -1, 1), "<=", 0) #David: Strategy 1
add.constraint(lprec, c(0, -2, -2, -2, -2, -1, 0, 1), "<=", 0) #David: Strategy 2
add.constraint(lprec, c(0, 0, -2, -4, -2, 0, 0, 1), "<=", 0) #David: Strategy 3
add.constraint(lprec, c(0, -1, -2, -2, -2, -1, 0, 1), "<=", 0) #David: Strategy 4
add.constraint(lprec, c(-1, -2, -1, 0, -1, -2, -1, 1), "<=", 0) #David: Strategy 5
add.constraint(lprec, c(1,1,1,1,1,1,1,0), "=", 1)    #Sum of probability
set.bounds(lprec, lower = c(0, 0, 0, 0, 0, 0, 0, -Inf))
RowNames <- c("Row1", "Row2", "Row3","Row4", "Row5", "Row6")
ColNames <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "v")
dimnames(lprec) <- list(RowNames, ColNames)
solve(lprec) # http://lpsolve.sourceforge.net/5.5/solve.htm
get.objective(lprec) #Value of the game
get.variables(lprec) #Probability distribution for Helen's strategies
get.constraints(lprec)
lprec
############ David's game ##############
library(lpSolveAPI)
lprec <- make.lp(0, 6)
lp.control(lprec, sense= "minimize")  #Player 2, hence sense is minimize
set.objfn(lprec, c(0, 0, 0, 0, 0, 1))
add.constraint(lprec, c(-1, 0, 0, 0, -1, 1), ">=", 0) #Helen uses strategy 1
add.constraint(lprec, c(-2, -2, 0, -1, -2, 1), ">=", 0) #Helen uses strategy 2
add.constraint(lprec, c(-1, -2, -2, -2, -1, 1), ">=", 0) #Helen uses strategy 3
add.constraint(lprec, c(0, -2, -4, -2, 0, 1), ">=", 0) #Helen uses strategy 4
add.constraint(lprec, c(-1, -2, -2, -2, -1, 1), ">=", 0) #Helen uses strategy 5
add.constraint(lprec, c(-2, -1, 0, -1, -2, 1), ">=", 0) #Helen uses strategy 6
add.constraint(lprec, c(-1, 0, 0, 0, -1, 1), ">=", 0) #Helen uses strategy 7
add.constraint(lprec, c(1,1,1,1,1,0), "=", 1) #Sum of probability
set.bounds(lprec, lower = c(0, 0, 0, 0, 0, -Inf))
RowNames <- c("Row1", "Row2", "Row3","Row4", "Row5", "Row6", "Row7","Row8" )
ColNames <- c("y1", "y2", "y3", "y4", "y5", "v")
dimnames(lprec) <- list(RowNames, ColNames)
solve(lprec) # http://lpsolve.sourceforge.net/5.5/solve.htm
get.objective(lprec) #Value of the game
get.variables(lprec) #Probability distribution
get.constraints(lprec)
lprec
library(lpSolveAPI)
chips <- make.lp(0, 8)
lp.control(chips, sense= "maximize")  #Player 1, hence sense is maximize
set.objfn(chips, c(0, 0, 0, 0, 0, 0, 0, 1))
add.constraint(chips, c(-1, -2, -1, 0, -1, -2, -1, 1), "<=", 0) #David: Strategy 1
add.constraint(chips, c(0, -2, -2, -2, -2, -1, 0, 1), "<=", 0) #David: Strategy 2
add.constraint(chips, c(0, 0, -2, -4, -2, 0, 0, 1), "<=", 0) #David: Strategy 3
add.constraint(chips, c(0, -1, -2, -2, -2, -1, 0, 1), "<=", 0) #David: Strategy 4
add.constraint(chips, c(-1, -2, -1, 0, -1, -2, -1, 1), "<=", 0) #David: Strategy 5
add.constraint(chips, c(1,1,1,1,1,1,1,0), "=", 1)    #Sum of probability
set.bounds(chips, lower = c(0, 0, 0, 0, 0, 0, 0, -Inf))
RowNames <- c("Row1", "Row2", "Row3","Row4", "Row5", "Row6")
ColNames <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "v")
dimnames(chips) <- list(RowNames, ColNames)
solve(chips) # http://lpsolve.sourceforge.net/5.5/solve.htm
get.objective(chips) #Value of the game
get.variables(chips) #Probability distribution for Helen's strategies
get.constraints(chips)
chips
